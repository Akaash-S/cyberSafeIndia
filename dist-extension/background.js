const n={apiBaseUrl:"https://cybersafeindiabackend-1.onrender.com/api",websiteUrl:"https://cybersafe-india.vercel.app",scanCacheExpiry:864e5,maxCacheSize:100};chrome.runtime.onInstalled.addListener(async e=>{console.log("CyberSafe India Extension installed/updated:",e.reason),await chrome.storage.sync.set({autoScan:!0,blockMalicious:!0,showWarnings:!0,notifications:!0,theme:"light",indicatorPosition:"top-right"}),await chrome.storage.local.set({dailyStats:{total:0,safe:0,threats:0},extensionInstallDate:Date.now()}),chrome.contextMenus.create({id:"scan-url",title:"Scan URL with CyberSafe India",contexts:["link"]}),chrome.alarms.create("dailyCleanup",{when:S(),periodInMinutes:1440})});chrome.contextMenus.onClicked.addListener(async(e,t)=>{e.menuItemId==="scan-url"&&e.linkUrl&&t?.id&&await i(e.linkUrl,t.id)});chrome.tabs.onUpdated.addListener(async(e,t,s)=>{t.status==="complete"&&s.url&&(await chrome.storage.sync.get(["autoScan"])).autoScan&&setTimeout(()=>{i(s.url,e)},2e3)});chrome.commands.onCommand.addListener(async e=>{if(e==="scan-current-page"){const[t]=await chrome.tabs.query({active:!0,currentWindow:!0});t?.url&&await i(t.url,t.id)}else e==="open-dashboard"&&chrome.tabs.create({url:`${n.websiteUrl}/dashboard`})});chrome.runtime.onMessage.addListener((e,t,s)=>{if(e.action==="scanUrl")return i(e.url,t.tab?.id).then(a=>s(a)).catch(a=>s({error:a.message})),!0;if(e.action==="getStats")return chrome.storage.local.get(["dailyStats"]).then(a=>{s(a.dailyStats||{total:0,safe:0,threats:0})}),!0;e.action==="updateUser"?(chrome.storage.local.set({user:e.user,authToken:e.authToken}),s({success:!0})):e.action==="authSync"&&(y(e.data),s({success:!0}))});async function i(e,t){try{const a=(await chrome.storage.local.get(["scanCache"])).scanCache||{},o=e.toLowerCase();if(a[o]&&Date.now()-a[o].timestamp<n.scanCacheExpiry)return console.log("Using cached scan result for:",e),a[o].result;const d=(await chrome.storage.local.get(["authToken"])).authToken,g={"Content-Type":"application/json"};d&&(g.Authorization=`Bearer ${d}`);const h=await fetch(`${n.apiBaseUrl}/scan`,{method:"POST",headers:g,body:JSON.stringify({url:e})});if(!h.ok)throw new Error(`HTTP error! status: ${h.status}`);const c=await h.json();a[o]={result:c,timestamp:Date.now()};const u=Object.entries(a);u.length>n.maxCacheSize&&u.sort((m,f)=>m[1].timestamp-f[1].timestamp).slice(0,u.length-n.maxCacheSize).forEach(([m])=>delete a[m]),await chrome.storage.local.set({scanCache:a});const r=(await chrome.storage.local.get(["dailyStats"])).dailyStats||{total:0,safe:0,threats:0};return r.total+=1,c.status==="safe"?r.safe+=1:r.threats+=1,await chrome.storage.local.set({dailyStats:r}),t&&chrome.tabs.sendMessage(t,{action:"updateSecurityStatus",status:c.status,message:c.title||"Scan completed"}).catch(()=>{}),(await chrome.storage.sync.get(["notifications"])).notifications&&c.status!=="safe"&&chrome.notifications.create({type:"basic",iconUrl:"icons/icon-48.png",title:"CyberSafe India",message:`Threat detected: ${c.title||"Suspicious URL"}`}),c}catch(s){throw console.error("Background scan error:",s),s}}async function y(e){try{if(e.isAuthenticated&&e.user){console.log("Syncing auth state from website:",e.user.email),await chrome.storage.local.set({user:e.user,authToken:e.token,lastAuthSync:Date.now(),authSource:"website"}),chrome.runtime.sendMessage({action:"updateUser",user:e.user,authToken:e.token}).catch(()=>{});const t=await chrome.storage.local.get(["lastAuthSync"]);Date.now()-(t.lastAuthSync||0)>3e4&&chrome.notifications.create({type:"basic",iconUrl:"icons/icon-48.png",title:"CyberSafe India",message:`Welcome back, ${e.user.displayName||e.user.email}!`})}else console.log("User logged out on website, syncing with extension"),await chrome.storage.local.remove(["user","authToken","authSource"]),chrome.runtime.sendMessage({action:"userLoggedOut"}).catch(()=>{})}catch(t){console.error("Error handling auth sync:",t)}}chrome.alarms.onAlarm.addListener(async e=>{e.name==="dailyCleanup"&&await w()});async function w(){try{const e=await chrome.storage.local.get(["scanCache"]);if(e.scanCache){const t=e.scanCache,s=Date.now()-10080*60*1e3,a={};for(const[o,l]of Object.entries(t))l.timestamp>s&&(a[o]=l);await chrome.storage.local.set({scanCache:a})}}catch(e){console.error("Error cleaning up cache:",e)}}function S(){const e=new Date,t=new Date(e);return t.setHours(24,0,0,0),t.getTime()}
